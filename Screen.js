// Generated by CoffeeScript 1.12.4
const Screen = (function () {
    /**
     * factory appellé depuis screen manager pour créer un écran
     * @param {object} dom de l'écran
     * @param {object} scene parente
     * @param {string} alias de l'écran
     * @return {object} Ecran
     */
    Screen.create = function (dom, scene, alias) {
        return new this(dom, scene, alias);
    };


    /**
     * constructeur
     * @param {object} dom de l'écran
     * @param {object} scene parente
     * @param {string} alias de l'écran
     */

    function Screen(dom, scene, alias) {
        this.dom = dom;
        this.scene = scene;
        this.alias = alias;
        this.name = this.dom.data("screen-name");
        this.isFullscreen = this.dom.hasClass("fullscreen");
    }


    /**
     * Helper pour le debug
     * @return {string} description de l'écran
     */

    Screen.prototype.toString = function () {
        return "[" + this.scene.toString() + " / Screen " + this.alias + (this.name != null ? " / " + this.name : "") + "]";
    };


    /**
     * récupère la liste des écrans depuis leurs alias
     * @param {string} alias des écrans
     * @return {array[object]} liste des écrans
     */


    /**
     * rafraichi les information lié au viewport (zone d'affichage de l'écran)
     * @return {void}
     */

    Screen.prototype.refreshViewport = function () {
        if (this.isFullscreen) {
            this.dom.css({
                width: this.scene.viewport.windowWidth + "px",
                height: this.scene.viewport.windowHeight + "px",
            });

            this.scene.refreshViewportInformation();
        }
    };


    /**
     * appelé pour construire l'écran (après chargement des assets)
     */

    Screen.prototype.build = function () {
        if (this.preBuild != null) {
            this.preBuild();
        }
        if (this.postBuild != null) {
            this.postBuild();
        }
        return this.dom.addClass('ready');
    };


    /**
     * Fonction abstraite appellé lorque l'écran arrive sur le viewport du navigateur
     */

    Screen.prototype.onEnterStage = function () {

        /**
         * Fonction abstraite appellé lorque l'écran quitte le viewport du navigateur
         */
    };

    Screen.prototype.onLeaveStage = function () {
    };


    /*
     split the size from data-screen-size (e.g.)
     @note jQuery.data returns a Number when possible, otherwise a String
     @param (String|Number) "width height" in pixels
     @return (Object)
     */

    Screen.prototype._dataSize = function (dataSize) {
        var obj, size;
        size = typeof dataSize === 'string' ? dataSize.split(' ') : [dataSize];
        obj = {};
        switch (size.length) {
            case 2:
                obj.width = parseInt(size[0]);
                obj.height = parseInt(size[1]);
                break;
            case 1:
                obj.width = obj.height = parseInt(size[0]);
                break;
            default:
                obj.width = obj.height = void 0;
        }
        return obj;
    };


    /*
     parse the values for four properties entry
     handles shorthand writings as in margin: top right bottom left
     @param (string) value w/ possible shorthand
     @return (object) four dimensions
     */

    Screen.prototype._dataFourProps = function (props) {
        var obj, parts;
        parts = typeof props === 'string' ? props.split(' ') : [props];
        obj = {};
        switch (parts.length) {
            case 4:
                obj.top = this._castPropertyValue(parts[0]);
                obj.right = this._castPropertyValue(parts[1]);
                obj.bottom = this._castPropertyValue(parts[2]);
                obj.left = this._castPropertyValue(parts[3]);
                break;
            case 3:
                obj.top = this._castPropertyValue(parts[0]);
                obj.right = obj.left = this._castPropertyValue(parts[1]);
                obj.bottom = this._castPropertyValue(parts[2]);
                break;
            case 2:
                obj.top = this._castPropertyValue(parts[1]);
                obj.left = this._castPropertyValue(parts[0]);
                obj.bottom = obj.right = 'auto';
                break;
            case 1:
                obj.top = obj.right = obj.bottom = obj.left = this._castPropertyValue(parts[0]);
                break;
            default:
                obj.top = obj.right = obj.bottom = obj.left = 'auto';
        }

        return obj;
    };

    Screen.prototype._isEmpty = function (value) {
        if (null === value || 'undefined' === typeof value) {
            return true;
        }

        if (String(value) === '') {
            return true;
        }

        return false;
    };

    /**
     * Convert scale from HTML attr to a [x, y] array
     * @param props
     */
    Screen.prototype._getScaleFromAttr = function (props) {
        if (!props) {
            return [1, 1];
        }

        // weird enough, the TweenMax props must be strings...
        let parts = props.split(' ').map(String);
        return parts.length == 2 ? parts : [parts[0], parts[0]];
    };

    /*
     Parse a boolean value from data
     @param (string) $.data return
     @param (boolean) defaults
     @return (boolean)
     */

    Screen.prototype._dataBoolean = function (data, defaults) {
        if (defaults == null) {
            defaults = true;
        }
        if (data == null) {
            return defaults;
        }
        return data;
    };


    /*
     cast enum
     @param (string) $.data return
     @param (array) list of words with default at position 0
     @return 'string'
     */

    Screen.prototype._dataEnum = function (data, list) {
        if (list == null) {
            list = [];
        }
        if (-1 !== list.indexOf(data)) {
            return data;
        }
        if (list.length) {
            return list[0];
        }
        return null;
    };


    /*
     cast property value to right type
     @param (mixed)
     @return (number|string) percentage or number
     */

    Screen.prototype._castPropertyValue = function (value) {
        value = '' + value;
        if ('auto' === value || '-' === value) {
            return 'auto';
        }
        if (-1 !== value.indexOf('%')) {
            return value;
        }
        return parseFloat(value.replace(/[^0-9-\.]/, ''));
    };


    /*
     convert to percent
     @param (number|string)
     @param (number)
     @return (string)
     */

    Screen.prototype._toPercent = function (amount, ref) {
        if (ref == null) {
            ref = 1;
        }
        amount = '' + amount;
        if (amount === 'auto') {
            return amount;
        }
        if (-1 !== amount.indexOf('%' || amount === 'auto')) {
            return amount;
        }
        return (parseFloat(amount) / parseFloat(ref) * 100) + '%';
    };


    /*
     Parse a number to Int or Float
     depending on rendering mode
     @param (mixed)
     @return (number) int of float
     */

    Screen.prototype._parseNumber = function (number) {
        if (this.rendering === 'fast') {
            return parseInt(number);
        }
        return parseFloat(number);
    };

    return Screen;

})();

export {Screen};
